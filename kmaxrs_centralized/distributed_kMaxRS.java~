package sidnet.stack.users.sample_p2p.kmaxrs_centralized;

import java.util.Collections;
import java.util.Hashtable;
import java.util.Vector;

import sidnet.stack.users.sample_p2p.driver.Driver_SampleP2P;

public class distributed_kMaxRS {
  public static Area field;
  public static Area coverage;
  public static int number_of_cluster;
  
  public static void setField(int sz) {
    field = new Area(sz, sz);
  }
  
  public static void setCoverage(int sz) {
    coverage = new Area(sz, sz);
  }
  
  public static void setNumberOfCluster(int n) {
    number_of_cluster = n;
  }
  
  public static DistSlabfile[] distributed_last(Vector<Objects> obj, 
                                                int k, 
                                                DictWindow dic, 
                                                int cl_id) {

    if (Driver_SampleP2P.DEBUG) {
      System.out.println("obj: " + obj.size());
    }
 
    Meit meit = new Meit();
    meit.numberOfRectangle = k;
    meit.dic_window = new DictWindow(coverage, field);
    // TOP: modification

    Vector<Objects> myObjects_sorted = (Vector<Objects>) obj.clone();
    // sort the objects, add the rectangles
    Collections.sort(myObjects_sorted);   
    if (Driver_SampleP2P.DEBUG) {
      for (Objects obj1: myObjects_sorted)
        System.out.println("obj sorted obj x: " + obj1.x + " y: " + obj1.y + " w: " + obj1.weight);
    }
    //System.out.println(" Object#: " + myObjects_sorted.size());

    Vector<Rectangle> myRectangles = new Vector<Rectangle>();
    object_to_rectangles(myRectangles, myObjects_sorted);
    if (Driver_SampleP2P.DEBUG) {
      for (Rectangle rec: myRectangles)
        System.out.println("rec sorted: " + rec);
    }
    
    Vector<Short> aListOfX1 = new Vector<Short>();
    for(int i = 0; i < myRectangles.size(); i++)
    {
      aListOfX1.add(myRectangles.get(i).x1);
      aListOfX1.add(myRectangles.get(i).x2);
    }

    Collections.sort(aListOfX1);
    Vector<Short> aListOfX = new Vector<Short>(); // xs in python code
    for(Short d : aListOfX1)
    {
      if(!aListOfX.contains(d))
        aListOfX.add(d);
    }

    IntervalTree root = meit.buildIntervalTree(0, aListOfX.size()-1, aListOfX, null);
//    System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
//    System.out.println("root: " + root);
    meit.preOrderTraverse(root, 0);
    meit.interval_tree_root = root;
    root.window = new Window(aListOfX.get(0), aListOfX.get(aListOfX.size() - 1),
                             (short) 0, (short) 0);

    Target cl2_target = meit.maxEnclosing_k(myRectangles, coverage, field, 
                                            root, meit.numberOfRectangle,
                                            null);
    if (Driver_SampleP2P.DEBUG) System.out.println("-------------------------------------------------------");
    // System.out.println("cl2_target: " + cl2_target);
    // System.out.println("dic_window: " + meit.dic_window);
    // Vector<Window> hintervals = new Vector<Window>();
    /*
    for(short sfk : slabFile.keySet()) {
      Window sf = (Window) slabFile.get(sfk);
      hintervals.add(sf);
    }
    Collections.sort(hintervals); // unused
    for(Window h : hintervals){
      System.out.println(h.h+"-----"+h.l+ " "+h.r+" "+h.score);
    }*/
    //System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"); 

    // System.out.println("Clus2: opt interval ------------------------------------------");
    //    for(Window win : opt_interval)
    //      System.out.println("Opt " + win);
    meit.writeOutput("dis_last.txt", field, coverage, myObjects_sorted, cl2_target.target);
    System.out.println("the resdis_last.txt is written.");
    Vector<Objects> values_up = new Vector<Objects>();
    Vector<Objects> values_next = new Vector<Objects>();
    int x_index = cl_id%number_of_cluster;
    int y_index = cl_id/number_of_cluster;
    int cluster_size = field.width;
    for (Objects os : myObjects_sorted) {
      if (y_index * cluster_size + coverage.height/2 > os.y) {
        values_up.add(os.clone());
      }
      if (x_index * cluster_size + coverage.width/2 > os.x) {
        values_next.add(os.clone());
      }
    }       
        
    DistSlabfile[] result = new DistSlabfile[2];
    // result[0] = new DistSlabfile(cl2_target.target, values);
    result[0] = new DistSlabfile(cl2_target.target, values_up, meit.dic_window.dic, meit.numberOfRectangle);
    System.out.println("result[0]: " + result[0]);
    // make a deep copy of the opt_interval
    // the clone method makes only the shallow copy of the vector and 
    // the objects inside.
//    Vector<Window> clu_3interval = new Vector<Window>();
//    for (Window win: cl2_target.target)
//      clu_3interval.add(win.clone());
    // result[1] = new DistSlabfile(clu_3interval, values1);
    result[1] = new DistSlabfile(cl2_target.target, values_next, meit.dic_window.dic, meit.numberOfRectangle);
    System.out.println("result[1]: " + result[1]);        
    return result;
  }
  
  public static DistSlabfile distributed_one_pkt(Vector<Objects> obj,
                                                 int k,
                                                 Hashtable<Window, Vector<Window>> dic,
                                                 Vector<Objects> values,
                                                 int cl_id) {

    if (Driver_SampleP2P.DEBUG) {
      System.out.println("obj: " + obj.size());
    }
 
    Meit meit = new Meit();
    meit.numberOfRectangle = k;
    meit.dic_window = new DictWindow(dic, coverage, field);
    // TOP: modification

    Vector<Objects> myObjects_sorted = (Vector<Objects>) obj.clone();
    myObjects_sorted.addAll(values);
    // sort the objects, add the rectangles
    Collections.sort(myObjects_sorted);   
    if (Driver_SampleP2P.DEBUG) {
      for (Objects obj1: myObjects_sorted)
        System.out.println("obj sorted obj x: " + obj1.x + " y: " + obj1.y + " w: " + obj1.weight);
    }
    System.out.println(" Object#: " + myObjects_sorted.size());
    for (Objects o: myObjects_sorted) System.out.println("Objects sort: " + o);

    Vector<Rectangle> myRectangles = new Vector<Rectangle>();
    object_to_rectangles(myRectangles, myObjects_sorted);
//    if (Driver_SampleP2P.DEBUG) {
//      for (Rectangle rec: myRectangles)
//        System.out.println("rec sorted: " + rec);
//    }
    
    Vector<Short> aListOfX1 = new Vector<Short>();
    for(int i = 0; i < myRectangles.size(); i++)
    {
      aListOfX1.add(myRectangles.get(i).x1);
      aListOfX1.add(myRectangles.get(i).x2);
    }

    Collections.sort(aListOfX1);
    Vector<Short> aListOfX = new Vector<Short>(); // xs in python code
    for(Short d : aListOfX1)
    {
      if(!aListOfX.contains(d))
        aListOfX.add(d);
    }

    IntervalTree root = meit.buildIntervalTree(0, aListOfX.size()-1, aListOfX, null);
//    System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
//    System.out.println("root: " + root);
    meit.preOrderTraverse(root, 0);
    meit.interval_tree_root = root;
    root.window = new Window(aListOfX.get(0), aListOfX.get(aListOfX.size() - 1),
                             (short) 0, (short) 0);

    Target cl2_target = meit.maxEnclosing_k(myRectangles, coverage, field, 
                                            root, meit.numberOfRectangle,
                                            null);
    if (Driver_SampleP2P.DEBUG) System.out.println("-------------------------------------------------------");
    // System.out.println("cl2_target: " + cl2_target);
    // System.out.println("dic_window: " + meit.dic_window);
    // Vector<Window> hintervals = new Vector<Window>();
    /*
    for(short sfk : slabFile.keySet()) {
      Window sf = (Window) slabFile.get(sfk);
      hintervals.add(sf);
    }
    Collections.sort(hintervals); // unused
    for(Window h : hintervals){
      System.out.println(h.h+"-----"+h.l+ " "+h.r+" "+h.score);
    }*/
    //System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"); 

    // System.out.println("Clus2: opt interval ------------------------------------------");
    //    for(Window win : opt_interval)
    //      System.out.println("Opt " + win);
    meit.writeOutput("dis_one_pck"+cl_id+".txt", field, coverage, myObjects_sorted, cl2_target.target);
    System.out.println("the resdis_one_pck"+cl_id+".txt is written.");
    Vector<Objects> values_up = new Vector<Objects>();
    Vector<Objects> values_next = new Vector<Objects>();
    int x_index = cl_id%number_of_cluster;
    int y_index = cl_id/number_of_cluster;
    int cluster_size = field.width;
    for (Objects os : myObjects_sorted) {
      if (y_index * cluster_size + coverage.height/2 > os.y) {
        values_up.add(os.clone());
      }
      if (x_index * cluster_size + coverage.width/2 > os.x) {
        values_next.add(os.clone());
      }
    }       
        
    DistSlabfile result = null;
    if (cl_id%Driver_SampleP2P.number_of_cluster >=1) {
      // cluster on the left most side
      result = new DistSlabfile(cl2_target.target, values_up, meit.dic_window.dic, meit.numberOfRectangle); 
    } else if ((cl_id < Driver_SampleP2P.number_of_cluster) || 
              ((cl_id >= (Driver_SampleP2P.number_of_cluster - 1) * Driver_SampleP2P.number_of_cluster) && 
               (cl_id < Driver_SampleP2P.number_of_cluster * Driver_SampleP2P.number_of_cluster))) {
      // cluster in the first row or the cluster in the last row
      result = new DistSlabfile(cl2_target.target, values_next, meit.dic_window.dic, meit.numberOfRectangle);
    }
    System.out.println("result: " + result);
    // make a deep copy of the opt_interval
    // the clone method makes only the shallow copy of the vector and 
    // the objects inside.
    //    Vector<Window> clu_3interval = new Vector<Window>();
    //    for (Window win: cl2_target.target)
    //      clu_3interval.add(win.clone());
    // result[1] = new DistSlabfile(clu_3interval, values1);
    return result;
  }

  public static DistSlabfile[] distributed_sink_pkt(Vector<Objects> obj, 
                                                   int k, 
                                                   DictWindow dic) {

    if (Driver_SampleP2P.DEBUG) {
      System.out.println("obj: " + obj.size());
    }
 
    Meit meit = new Meit();
    meit.numberOfRectangle = k;
    meit.dic_window = new DictWindow(coverage, field);
    // TOP: modification

    Vector<Objects> myObjects_sorted = (Vector<Objects>) obj.clone();
    // sort the objects, add the rectangles
    Collections.sort(myObjects_sorted);   
    if (Driver_SampleP2P.DEBUG) {
      for (Objects obj1: myObjects_sorted)
        System.out.println("obj sorted obj x: " + obj1.x + " y: " + obj1.y + " w: " + obj1.weight);
    }
    //System.out.println(" Object#: " + myObjects_sorted.size());

    Vector<Rectangle> myRectangles = new Vector<Rectangle>();
    object_to_rectangles(myRectangles, myObjects_sorted);
    if (Driver_SampleP2P.DEBUG) {
      for (Rectangle rec: myRectangles)
        System.out.println("rec sorted: " + rec);
    }
    
    Vector<Short> aListOfX1 = new Vector<Short>();
    for(int i = 0; i < myRectangles.size(); i++)
    {
      aListOfX1.add(myRectangles.get(i).x1);
      aListOfX1.add(myRectangles.get(i).x2);
    }

    Collections.sort(aListOfX1);
    Vector<Short> aListOfX = new Vector<Short>(); // xs in python code
    for(Short d : aListOfX1)
    {
      if(!aListOfX.contains(d))
        aListOfX.add(d);
    }

    IntervalTree root = meit.buildIntervalTree(0, aListOfX.size()-1, aListOfX, null);
//    System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
//    System.out.println("root: " + root);
    meit.preOrderTraverse(root, 0);
    meit.interval_tree_root = root;
    root.window = new Window(aListOfX.get(0), aListOfX.get(aListOfX.size() - 1),
                             (short) 0, (short) 0);

    Target cl2_target = meit.maxEnclosing_k(myRectangles, coverage, field, 
                                            root, meit.numberOfRectangle,
                                            null);
    if (Driver_SampleP2P.DEBUG) System.out.println("-------------------------------------------------------");
    // System.out.println("cl2_target: " + cl2_target);
    // System.out.println("dic_window: " + meit.dic_window);
    // Vector<Window> hintervals = new Vector<Window>();
    /*
    for(short sfk : slabFile.keySet()) {
      Window sf = (Window) slabFile.get(sfk);
      hintervals.add(sf);
    }
    Collections.sort(hintervals); // unused
    for(Window h : hintervals){
      System.out.println(h.h+"-----"+h.l+ " "+h.r+" "+h.score);
    }*/
    //System.out.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"); 

    // System.out.println("Clus2: opt interval ------------------------------------------");
    //    for(Window win : opt_interval)
    //      System.out.println("Opt " + win);
    meit.writeOutput("dis_last.txt", field, coverage, myObjects_sorted, cl2_target.target);
    System.out.println("the resdis_last.txt is written.");
    Vector<Objects> values_up = new Vector<Objects>();
    Vector<Objects> values_next = new Vector<Objects>();
    int x_index = cl_id%number_of_cluster;
    int y_index = cl_id/number_of_cluster;
    int cluster_size = field.width;
    for (Objects os : myObjects_sorted) {
      if (y_index * cluster_size + coverage.height/2 > os.y) {
        values_up.add(os.clone());
      }
      if (x_index * cluster_size + coverage.width/2 > os.x) {
        values_next.add(os.clone());
      }
    }       
        
    DistSlabfile[] result = new DistSlabfile[2];
    // result[0] = new DistSlabfile(cl2_target.target, values);
    result[0] = new DistSlabfile(cl2_target.target, values_up, meit.dic_window.dic, meit.numberOfRectangle);
    System.out.println("result[0]: " + result[0]);
    // make a deep copy of the opt_interval
    // the clone method makes only the shallow copy of the vector and 
    // the objects inside.
//    Vector<Window> clu_3interval = new Vector<Window>();
//    for (Window win: cl2_target.target)
//      clu_3interval.add(win.clone());
    // result[1] = new DistSlabfile(clu_3interval, values1);
    result[1] = new DistSlabfile(cl2_target.target, values_next, meit.dic_window.dic, meit.numberOfRectangle);
    System.out.println("result[1]: " + result[1]);        
    return result;
  }
  
  static void object_to_rectangles(Vector<Rectangle> myRectangles, Vector<Objects> myObjects_sorted) {
    // assume that we have sorted the vector/list of objects before
    for(Objects obj : myObjects_sorted){
      myRectangles.add(new Rectangle((short)Math.max(0, obj.x - coverage.width/2),
                                     (short)Math.max(0, obj.y - coverage.height/2),
                                     (short)Math.min(field.width,
                                                     obj.x + coverage.width/2),
                                     (short)Math.min(field.height,
                                                     obj.y + coverage.height/2),
                                     obj.weight));
    }
  }
}
